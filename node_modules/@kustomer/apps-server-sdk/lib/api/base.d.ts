import { AxiosInstance, AxiosRequestConfig } from 'axios';
import { ENVS } from '../constants';
import { KLogger } from '../logger';
export interface APIBaseOptions {
    readonly app: string;
    readonly clientId: string;
    readonly env?: keyof typeof ENVS;
    readonly namespace?: boolean;
    readonly token?: string;
    readonly logger?: KLogger;
}
export declare class APIBase {
    protected readonly token: string;
    protected readonly name: string;
    protected readonly orgNameOrId: string;
    protected readonly options: APIBaseOptions;
    readonly axios: AxiosInstance;
    readonly _log: KLogger;
    protected get baseUrls(): {
        gateway: string;
        api: string;
        web: string;
    } | {
        gateway: string;
        api: string;
        web: string;
    } | {
        gateway: string;
        api: string;
        web: string;
    } | {
        gateway: string;
        api: string;
        web: string;
    };
    /**
     * @param token the apps token
     * @param name the name of the api
     * @param orgNameOrId the name or id of the org in reference (unique)
     * @param options the apps options
     */
    constructor(token: string, name: string, orgNameOrId: string, options: APIBaseOptions);
    /**
     * get an app auth token to make requests in an org
     * @param forceRefresh ignore cached values
     */
    getToken(forceRefresh?: boolean): Promise<string | undefined>;
    /**
     * @private
     */
    _onRequest(config: AxiosRequestConfig): Promise<{
        headers: any;
        url?: string | undefined;
        method?: import("axios").Method | undefined;
        baseURL?: string | undefined;
        transformRequest?: import("axios").AxiosTransformer | import("axios").AxiosTransformer[] | undefined;
        transformResponse?: import("axios").AxiosTransformer | import("axios").AxiosTransformer[] | undefined;
        params?: any;
        paramsSerializer?: ((params: any) => string) | undefined;
        data?: any;
        timeout?: number | undefined;
        timeoutErrorMessage?: string | undefined;
        withCredentials?: boolean | undefined;
        adapter?: import("axios").AxiosAdapter | undefined;
        auth?: import("axios").AxiosBasicCredentials | undefined;
        responseType?: import("axios").ResponseType | undefined;
        xsrfCookieName?: string | undefined;
        xsrfHeaderName?: string | undefined;
        onUploadProgress?: ((progressEvent: any) => void) | undefined;
        onDownloadProgress?: ((progressEvent: any) => void) | undefined;
        maxContentLength?: number | undefined;
        validateStatus?: ((status: number) => boolean) | null | undefined;
        maxBodyLength?: number | undefined;
        maxRedirects?: number | undefined;
        socketPath?: string | null | undefined;
        httpAgent?: any;
        httpsAgent?: any;
        proxy?: false | import("axios").AxiosProxyConfig | undefined;
        cancelToken?: import("axios").CancelToken | undefined;
        decompress?: boolean | undefined;
        transitional?: import("axios").TransitionalOptions | undefined;
    }>;
}
