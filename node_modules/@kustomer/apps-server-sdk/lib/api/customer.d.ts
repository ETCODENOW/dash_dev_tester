import { WithID } from '../common';
import { Customer, CustomerCreate, CustomerUpdate, KObject } from '../models';
import { APIBase, APIBaseOptions } from './base';
export declare class Customers extends APIBase {
    constructor(token: string, orgNameOrId: string, options: APIBaseOptions);
    /**
     * get a customer by id
     * @param id customer id (unique)
     */
    getById(id: string): Promise<WithID<Customer> | undefined>;
    /**
     * get a customer by external id
     * @param externalId customer external id
     */
    getByExternalId(externalId: string): Promise<{
        rev?: number | undefined;
        name?: string | undefined;
        company?: string | undefined;
        externalId?: string | undefined;
        externalIds?: import("../models").ExternalID[] | undefined;
        sharedExternalIds?: import("../models").ExternalID[] | undefined;
        username?: string | undefined;
        avatarUrl?: string | undefined;
        locale?: string | undefined;
        timeZone?: string | undefined;
        tags?: string[] | undefined;
        gender?: "m" | "f" | "o" | "p" | undefined;
        emails?: import("../models").Email[] | undefined;
        sharedEmails?: import("../models").Email[] | undefined;
        phones?: import("../models").Phone[] | undefined;
        sharedPhones?: import("../models").Phone[] | undefined;
        whatsapps?: import("../models").Phone[] | undefined;
        facebookIds?: import("../models").FacebookID[] | undefined;
        instagramIds?: import("../models").InstagramID[] | undefined;
        socials?: import("../models").Social[] | undefined;
        sharedSocials?: import("../models").Social[] | undefined;
        urls?: import("../models").Url[] | undefined;
        locations?: import("../models").Location[] | undefined;
        sentiment?: import("../models").Sentiment | undefined;
        dedicatedUser?: string | undefined;
        custom?: any;
        birthdayAt?: Date | undefined;
        signedUpAt?: Date | undefined;
        importedAt?: Date | undefined;
        lastActivityAt?: Date | undefined;
        lastCustomerActivityAt?: Date | undefined;
        lastSeenAt?: Date | undefined;
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        modifiedAt?: Date | undefined;
        id: string;
    } | undefined>;
    /**
     * get a customer by email
     * @param email customer email (unique)
     */
    getByEmail(email: string): Promise<WithID<Customer> | undefined>;
    /**
     * get a customer by phone
     * @param phone customer phone (unique)
     * @returns
     */
    getByPhone(phone: string): Promise<WithID<Customer> | undefined>;
    /**
     * create a new customer
     */
    create<T>(args: CustomerCreate<T>): Promise<WithID<Customer>>;
    /**
     * update an existing customer
     * @param id customer id (unique)
     */
    update<T>(id: string, args: CustomerUpdate<T>): Promise<WithID<Customer>>;
    /**
     * create a kobject for a customer
     * @param id customer id (unique)
     * @param klass klass name
     */
    createKObject<T = any>(id: string, klass: string, object: KObject<T>): Promise<WithID<KObject>>;
}
