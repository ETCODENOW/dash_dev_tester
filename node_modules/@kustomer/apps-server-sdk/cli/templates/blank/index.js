"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const javascript_1 = require("./javascript");
const typescript_1 = require("./typescript");
function default_1(isTs, args) {
    const fn = isTs ? typescript_1.typescript : javascript_1.javascript;
    const exists = fs_1.default.existsSync(path_1.default.join(process.cwd(), args.name));
    if (exists) {
        throw new Error(`a directory with name "${args.name}" already exists`);
    }
    fs_1.default.mkdirSync(path_1.default.join(process.cwd(), args.name));
    fs_1.default.writeFileSync(path_1.default.join(process.cwd(), args.name, '.env'), `BASE_URL=${args.app.url}
CLIENT_ID=${args.app.clientId}
CLIENT_SECRET=${args.app.clientSecret}`);
    fs_1.default.writeFileSync(path_1.default.join(process.cwd(), args.name, 'changelog.json'), `{
  "0.0.0": "init"
}`);
    if (args.platform === 'render') {
        fs_1.default.writeFileSync(path_1.default.join(process.cwd(), args.name, 'render.yaml'), `
services:
  - type: web
    name: ${args.name}
    env: node
    plan: free
    branch: main
    healthCheckPath: /
    autoDeploy: true
    buildCommand: npm install
    startCommand: npm start
    envVars:
      - key: BASE_URL
        value: ${args.app.url}
      - key: CLIENT_ID
        value: ${args.app.clientId}
      - key: CLIENT_SECRET
        value: ${args.app.clientSecret}
`);
    }
    fn(args);
    (0, child_process_1.execSync)(`npm --prefix=${args.name} install`, {
        stdio: [0, 'pipe', process.stdout]
    });
}
exports.default = default_1;
//# sourceMappingURL=index.js.map