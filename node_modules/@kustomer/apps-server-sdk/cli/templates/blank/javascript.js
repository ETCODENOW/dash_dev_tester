"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.javascript = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const package_json_1 = __importDefault(require("../../../package.json"));
function javascript(args) {
    fs_1.default.writeFileSync(path_1.default.join(process.cwd(), args.name, 'package.json'), `{
  "name": "${args.app.app}",
  "version": "0.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \\"Error: no test specified\\" && exit 1",
    "start": "DEBUG=kapp* node .",
    "start:local": "NODE_ENV=local DEBUG=kapp* node ."
  },
  "author": "",
  "license": "ISC",
  "engines": {
    "npm": ">=7.0.0",
    "node": ">=16.0.0"
  },
  "dependencies": {
    "@kustomer/apps-server-sdk": "^${package_json_1.default.version}",
    "dotenv": "^16.0.1"
  }
}`);
    fs_1.default.writeFileSync(path_1.default.join(process.cwd(), args.name, 'index.js'), `require('dotenv/config');
const { KApp } = require('@kustomer/apps-server-sdk');

const pkg = require('./package.json');
const changelog = require('./changelog.json');

if (!process.env.BASE_URL) {
  throw new Error('baseUrl is required');
}

if (!process.env.CLIENT_ID || !process.env.CLIENT_SECRET) {
  throw new Error('clientId and clientSecret are required');
}

const app = new KApp({
  app: pkg.name,
  version: pkg.version,
  title: '${args.app.app}',
  visibility: '${args.visibility}',
  description: '',
  dependencies: [],
  default: false,
  system: false,
  url: process.env.BASE_URL,
  clientId: process.env.CLIENT_ID,
  clientSecret: process.env.CLIENT_SECRET,
  iconUrl: \`\${process.env.BASE_URL\}/assets/icon.png\`,
  env: '${args.env}',
  changelog,
  roles: [
    'org.user.customer.read',
    'org.user.customer.write',
    'org.user.message.read',
    'org.permission.customer.read',
    'org.permission.customer.create',
    'org.permission.customer.update',
    'org.permission.message.read'
  ],
  appDetails: {
    appDeveloper: {
      name: 'Kustomer',
      website: 'https://kustomer.com',
      supportEmail: 'support@kustomer.com',
    },
    externalPlatform: {
      name: '${args.app.app}',
      website: 'https://${args.app.app}.com',
    },
  },
  screenshots: []
});

(async () => {
  try {
    await app.start({ port: +(process.env.PORT || 3000) });
  } catch (err) {
    app.log.error(JSON.stringify(err, undefined, 2));
  }
})();`);
}
exports.javascript = javascript;
//# sourceMappingURL=javascript.js.map