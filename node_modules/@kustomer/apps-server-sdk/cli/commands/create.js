"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.options = void 0;
const yargs_1 = __importDefault(require("yargs"));
const prompt_1 = __importDefault(require("prompt"));
const constants_1 = require("../../lib/constants");
const services_1 = require("../services");
const templates_1 = __importDefault(require("../templates"));
function options(argv) {
    argv
        .option('typescript', {
        type: 'boolean',
        description: 'Create a typescript project instead of the javascript default',
        default: false
    })
        .option('template', {
        type: 'string',
        choices: Object.keys(templates_1.default),
        default: 'blank',
        description: 'The template you want to use as your project base'
    })
        .option('env', {
        alias: 'e',
        type: 'string',
        choices: Object.keys(constants_1.ENVS),
        description: 'The environment where your app should be created',
        default: 'prod'
    })
        .option('platform', {
        type: 'string',
        choices: ['render'],
        description: 'Add necessary platform files for easy deployments'
    });
}
exports.options = options;
function handler() {
    return async (args) => {
        if (args._.length !== 2) {
            yargs_1.default.showHelp();
            return;
        }
        prompt_1.default.start({ colors: true, message: 'kapp' });
        const properties = {
            name: {
                pattern: RegExp(/^[a-zA-Z0-9_]+$/),
                minLength: 1,
                maxLength: 128,
                required: true,
                default: args._[1],
                message: 'Must be only letters, spaces, or underscores'
            },
            url: {
                pattern: RegExp(/^https:\/\/([a-zA-Z0-9\.\-\_\/]*)/),
                required: true,
                message: 'Must be a valid https url of your app server'
            },
            visibility: {
                enum: ['private', 'public'],
                default: 'private',
                required: true,
                message: 'Must be either "public" or "private"'
            },
            org: {
                pattern: RegExp(/^[a-zA-Z\-]+$/),
                required: true,
                message: 'Must be a valid org name in the specified environment'
            }
        };
        try {
            const props = await prompt_1.default.get({ properties });
            await services_1.Auth.getToken(props.org.toString(), args.env);
            let app = await services_1.Apps.findByName(args.env, props.name.toString());
            if (!app) {
                app = await services_1.Apps.create(args.env, props.name.toString(), props.url.toString());
            }
            if (!app.clientId || !app.clientSecret) {
                throw new Error('an app with this name already exists');
            }
            templates_1.default[args.template](args.typescript, {
                name: props.name.toString(),
                visibility: props.visibility.toString(),
                env: args.env,
                app,
                platform: args.platform
            });
        }
        catch (err) {
            console.error(err.message);
        }
    };
}
exports.handler = handler;
//# sourceMappingURL=create.js.map