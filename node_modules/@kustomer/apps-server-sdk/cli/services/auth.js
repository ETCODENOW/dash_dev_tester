"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Auth = void 0;
const node_localstorage_1 = __importDefault(require("node-localstorage"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const puppeteer_1 = __importDefault(require("puppeteer"));
const constants_1 = require("../../lib/constants");
const storage = new node_localstorage_1.default.LocalStorage(path_1.default.join(os_1.default.homedir(), 'kapp'));
class Auth {
    static get headers() {
        if (this.token) {
            return {
                Authorization: `Bearer ${this.token}`
            };
        }
        return {};
    }
    static get token() {
        return this._token;
    }
    static _token;
    static async getToken(org, env) {
        let token = storage.getItem(`${env}_${org}_token`) || undefined;
        if (token) {
            this._token = token;
            storage.setItem(`${env}_${org}_token`, token);
            return token;
        }
        const url = constants_1.ENVS[env].web.replace('https://', `https://${org}.`);
        try {
            const browser = await puppeteer_1.default.launch({
                headless: false,
                defaultViewport: null,
                args: ['--no-sandbox'],
                ignoreDefaultArgs: ['--enable-automation']
            });
            const page = await browser.newPage();
            await page.goto(url);
            await page.waitForSelector('#kustomer-ui-sdk-iframe', { timeout: 0 });
            const client = await page.target().createCDPSession();
            const cookies = (await client.send('Network.getAllCookies')).cookies;
            token = cookies.find((c) => c.name === 'x-kustomer-auth-token')?.value;
            await browser.close();
            if (token) {
                this._token = token;
                storage.setItem(`${env}_${org}_token`, token);
            }
            return token;
        }
        catch (err) {
            console.error(err);
        }
    }
}
exports.Auth = Auth;
//# sourceMappingURL=auth.js.map